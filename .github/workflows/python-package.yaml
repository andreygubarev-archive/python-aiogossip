name: Python Package

on: [push]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: python -m pip install flake8

    - name: Lint with pycodestyle
      run: make lint

  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Docker
      uses: crazy-max/ghaction-setup-docker@v2

    - name: Install dependencies
      run: |
        python -m pip install pipenv
        python -m pipenv install --dev

    - name: Test with pytest
      run: python -m pipenv run make test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: python -m pip install build --user

    - name: Build a binary wheel and a source tarball
      run: python -m build --sdist --wheel --outdir dist/ .

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: 'dist/*'

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: python-package

    - name: Publish package
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: .

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Check if pre-release
      id: prerelease
      run: |
        echo "prerelease=$(if [[ "${{ github.ref }}" == *"-rc"* ]]; then echo "true"; else echo "false"; fi)" >> "$GITHUB_OUTPUT"

    - uses: actions/download-artifact@v3
      with:
        name: python-package

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: ${{ steps.prerelease.outputs.prerelease }}
        generate_release_notes: true
        files: |
          *.whl
          *.tar.gz